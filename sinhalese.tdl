;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Sinhalese
;;; created at:
;;;     Thu Jan 25 14:25:42 UTC 2024
;;; based on Matrix customization system version of:
;;;     Fri 27 Oct 2023 04:16:13 PM UTC
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ DEF bool,
    PER person,
    NUM number,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT -,
             LOCAL.CAT.MC #mc ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head :+ [ PRON bool,
    FORM form,
    AUX bool ].

noun :+ [ CASE case ].

inflected :+ [ NPT-PC-FLAG luk ].

infl-satisfied :+ [ NPT-PC-FLAG na-or-+ ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
;     mother and head-daughter for all other kinds of phrases
;     if we do this.  Just for illustration, I'm putting it
;     in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
animate := gender.
inanimate := gender.
feminine := animate.
masculine := animate.

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative
gen := case.  ; genitive
voc := case.  ; vocative
ins := case.  ; instrumental
dat := case.  ; dative

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

nonpast := tense.
past := tense.
perfect-participle := past.
past-participle := past.

;;; Aspect

Perfective := aspect.
Completive := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

inanimate-noun-noun-lex := common-noun-noun-lex & case-pc-rule-dtr & indefiniteness-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.NUM singular ] ].

animate-noun-noun-lex := common-noun-noun-lex & case-pc-rule-dtr & indefiniteness-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

common-noun-noun-lex := noun-lex.

pl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.NUM plural ] ].

1sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 1st ] ].

1pl-pronoun-noun-lex := pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 1st ] ].

2sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr & plural-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 2nd ] ].

3sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr & plural-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 3rd ] ].

irreg-acc-noun-noun-lex := inanimate-noun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

irreg-plural-noun-noun-lex := common-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

irreg-indef-noun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.DEF - ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD verb,
             L-QUE - ],
    INFLECTED.NPT-PC-FLAG - ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex & perf-part-pc-rule-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

acc-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE acc ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

transitive-verb-verb-lex := nom-acc-transitive-verb-lex.

intransitive-verb-verb-lex := nom-intransitive-verb-lex.

transitive-verb-dative-subject-verb-lex := transitive-verb-lex.

irreg-trans-pst-verb-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

irreg-trans-ptcp-verb-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past-participle ].

irreg-trans-pp-verb-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past-participle ].

irreg-intrans-pst-verb-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

interrogative-verb-lex := basic-wh-word-lex & basic-verb-lex-super & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK [ INDEX.SF ques,
                               XARG #xarg ],
                   CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < >,
                             SUBJ < #subj > ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < >,
                                       SUBJ < >,
                                       SPEC < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

where-interrogative-verb-lex := interrogative-verb-lex & basic-icons-lex-item & norm-hook-lex-item &
  [ ARG-ST < [ LOCAL [ CAT cat-sat &
                           [ HEAD noun ],
                       CONT.HOOK [ INDEX ref-ind & #ind,
                                   ICONS-KEY.IARG1 #clause ] ] ] >,
    SYNSEM [ LKEYS.KEYREL event-relation &
                          [ ARG1 #ind ],
             LOCAL.CONT [ HOOK.CLAUSE-KEY #clause,
                          RELS.LIST < [ LBL #ltop,
                                        ARG0 #clause ],
                                      [ LBL #ltop,
                                        ARG0 event,
                                        ARG1 #clause,
                                        ARG2 #ind2 ],
                                      [ ARG0 #ind2,
                                        LBL #larg ],
                                      [ PRED "which_q_rel",
                                        ARG0 #ind2,
                                        RSTR #harg ] >,
                          HCONS.LIST < [ HARG #harg,
                                         LARG #larg ] > ] ] ].

who-interrogative-verb-lex := interrogative-verb-lex & basic-icons-lex-item & norm-hook-lex-item &
  [ ARG-ST < [ LOCAL [ CAT cat-sat &
                           [ HEAD noun ],
                       CONT.HOOK [ INDEX ref-ind & #ind,
                                   ICONS-KEY.IARG1 #clause ] ] ] >,
    SYNSEM [ LKEYS.KEYREL event-relation &
                          [ ARG1 #ind,
                            ARG2 ref-ind & #ind2 ],
             LOCAL.CONT [ HOOK.CLAUSE-KEY #clause,
                          RELS.LIST < [ ARG2 #ind2 ],
                                      quant-relation &
                                      [ PRED "which_q_rel",
                                        ARG0 #ind2,
                                        RSTR #harg ],
                                      noun-relation &
                                      [ LBL #larg,
                                        ARG0 #ind2 ] >,
                          HCONS.LIST < [ HARG #harg,
                                         LARG #larg ] > ] ] ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

perf-part-aux-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM form,
                                             CONT.HOOK.INDEX.E.TENSE past ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

future-aux-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM form,
                                             CONT.HOOK.INDEX.E.TENSE nonpast ] ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

regular-attr-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

cardinal-except-attr-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

quantifier-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ] ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

perf-part-pc-rule-dtr := word-or-lexrule.
case-pc-rule-dtr := word-or-lexrule.
indefiniteness-pc-rule-dtr := word-or-lexrule.
plural-pc-rule-dtr := word-or-lexrule.

;;; Lexical rule types

indefiniteness-pc-lex-rule-super := add-only-no-ccont-rule & case-pc-rule-dtr & infl-lex-rule &
  [ INFLECTED #infl,
    DTR indefiniteness-pc-rule-dtr &
        [ INFLECTED #infl ] ].

indefinite-rule-lex-rule := indefiniteness-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.DEF - ].

case-pc-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED #infl,
    DTR case-pc-rule-dtr &
        [ INFLECTED #infl ] ].

dative-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

accusative-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

genitive-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

nominative-rule-lex-rule := case-pc-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

nominative-pronoun-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

plural-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR plural-pc-rule-dtr &
        [ INFLECTED #infl ] ].

pl-pronoun-lex-rule := plural-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

npt-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED.NPT-PC-FLAG +,
    DTR verb-lex ].

npt-lex-rule := npt-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

perf-part-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR perf-part-pc-rule-dtr &
        [ INFLECTED #infl ] ].

perf-part-rule-lex-rule := perf-part-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE perfect-participle ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX - ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := infl-bottom-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1",
    SYNSEM.LOCAL.COORD-REL.PRED "_and_coord_rel",
    DTR.SYNSEM.LOCAL.CAT.HEAD noun ].

n1-left-coord-rule := infl-left-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "1",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := unary-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 3

np3-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].
