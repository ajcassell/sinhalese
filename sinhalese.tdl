;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Sinhalese
;;; created at:
;;;     Fri Feb 02 22:41:41 UTC 2024
;;; based on Matrix customization system version of:
;;;     Fri 27 Oct 2023 04:16:13 PM UTC
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ DEF bool,
    PER person,
    NUM number,
    GEND gender ].

head :+ [ INVOL bool,
    PRON bool,
    NMZ bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form,
    AUX bool,
    INIT bool ].

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT #light,
             LOCAL.CAT [ HC-LIGHT #light,
                         MC #mc ] ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

noun :+ [ CASE case ].

lex-or-phrase-synsem :+ [ INFOSTR-FLAG luk ].

decl-head-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-1st-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-2nd-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-opt-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-opt-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-mod-phrase-simple :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-spec-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-bare-np-phrase :+ [ SYNSEM.INFOSTR-FLAG -, HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

coord-phrase :+ [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    LCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    RCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz ].

unary-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    ARGS < [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz ] > ].

inflected :+ [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG luk,
    TENSE-PC-FLAG luk,
    INDEFINITENESS-PC-FLAG luk,
    INVOL-CASE-CONSTRAINTS-PC-FLAG luk,
    INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG luk,
    CASE-PC-OR-PRONOUN-CASE-PC-FLAG luk,
    INANIMATE-NOUN-FLAG luk,
    VOL-CASE-CONSTRAINTS-PC-FLAG luk,
    CASE-PC-FLAG luk,
    FEM-NOUN-FLAG luk,
    VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG luk,
    FEM-NOUN-OR-MASC-NOUN-FLAG luk,
    NUMBER-PC-FLAG luk,
    POSSESSION-PC-FLAG luk ].

infl-satisfied :+ [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG na-or-+,
    TENSE-PC-FLAG na-or-+,
    INDEFINITENESS-PC-FLAG na-or-+,
    INVOL-CASE-CONSTRAINTS-PC-FLAG na-or-+,
    INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG na-or-+,
    CASE-PC-OR-PRONOUN-CASE-PC-FLAG na-or-+,
    INANIMATE-NOUN-FLAG na-or-+,
    VOL-CASE-CONSTRAINTS-PC-FLAG na-or-+,
    CASE-PC-FLAG na-or-+,
    FEM-NOUN-FLAG na-or-+,
    VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG na-or-+,
    FEM-NOUN-OR-MASC-NOUN-FLAG na-or-+,
    NUMBER-PC-FLAG na-or-+,
    POSSESSION-PC-FLAG na-or-+ ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
;     mother and head-daughter for all other kinds of phrases
;     if we do this.  Just for illustration, I'm putting it
;     in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

poss-case := case.

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
animate := gender.
inanimate := gender.
feminine := animate.
masculine := animate.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
nom := real-case.  ; nom
acc := real-case.  ; accusative
gen := real-case.  ; genitive
voc := real-case.  ; vocative
ins := real-case.  ; instrumental
dat := real-case.  ; dative

;;; Form

form := *top*.
nonfinite := form.
finite := form.
past-part := finite.
while := nonfinite.

;;; Tense

nonpast := tense.
future := nonpast.
past := tense.

;;; Aspect

Perfective := aspect.
Completive := aspect.

;;; Mood

indicative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.NMZ - ] ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

inanimate-noun-lex := noun-lex & case-pc-rule-dtr & indefiniteness-pc-rule-dtr & number-pc-rule-dtr & possession-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate,
    INFLECTED [ NUMBER-PC-FLAG -,
                POSSESSION-PC-FLAG -,
                INDEFINITENESS-PC-FLAG -,
                CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG +,
                FEM-NOUN-FLAG na-or-- ] ].

sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.NUM singular ],
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

pl-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.NUM plural ],
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

1sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 1st ],
    INFLECTED [ CASE-PC-OR-PRONOUN-CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

1pl-pronoun-noun-lex := pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 1st ],
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

2sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 2nd ],
    INFLECTED [ CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

3sg-pronoun-noun-lex := sg-pronoun-noun-lex & case-pc-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 3rd ],
    INFLECTED [ CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

irreg-plural-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural,
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

irreg-indef-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.DEF -,
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

2pl-pronoun-noun-lex := pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 2nd ],
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

3pl-pronoun-noun-lex := pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON +,
    INFLECTED [ FEM-NOUN-OR-MASC-NOUN-FLAG na-or--,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

fem-noun-lex := noun-lex & case-pc-rule-dtr & indefiniteness-pc-rule-dtr & number-pc-rule-dtr & possession-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine,
    INFLECTED [ NUMBER-PC-FLAG -,
                POSSESSION-PC-FLAG -,
                INDEFINITENESS-PC-FLAG -,
                CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG +,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG + ] ].

masc-noun-lex := noun-lex & case-pc-rule-dtr & indefiniteness-pc-rule-dtr & number-pc-rule-dtr & possession-pc-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine,
    INFLECTED [ NUMBER-PC-FLAG -,
                POSSESSION-PC-FLAG -,
                INDEFINITENESS-PC-FLAG -,
                CASE-PC-FLAG -,
                FEM-NOUN-OR-MASC-NOUN-FLAG +,
                INANIMATE-NOUN-FLAG na-or--,
                FEM-NOUN-FLAG na-or-- ] ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT [ HEAD verb &
                              [ NMZ - ],
                         HC-LIGHT - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item & mood-pc-rule-dtr & tense-pc-rule-dtr & vol-case-constraints-pc-rule-dtr & vol-case-constraints-subj-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ],
    INFLECTED [ VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG -,
                VOL-CASE-CONSTRAINTS-PC-FLAG -,
                TENSE-PC-FLAG - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := main-verb-lex & transitive-lex-item & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] > ].

clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ MC na-or--,
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < > ] ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

acc-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE acc ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

invol-trans-verb-lex := transitive-verb-lex & invol-case-constraints-pc-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.INVOL +,
    INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG -,
                INVOL-CASE-CONSTRAINTS-PC-FLAG -,
                TENSE-PC-FLAG - ] ].

invol-intrans-verb-lex := intransitive-verb-lex & invol-case-constraints-pc-rule-dtr & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.INVOL +,
    INFLECTED [ INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG -,
                INVOL-CASE-CONSTRAINTS-PC-FLAG -,
                TENSE-PC-FLAG - ] ].

vol-trans-verb-lex := transitive-verb-lex & vol-case-constraints-pc-rule-dtr & vol-case-constraints-subj-pc-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.INVOL -,
    INFLECTED [ VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG -,
                VOL-CASE-CONSTRAINTS-PC-FLAG -,
                TENSE-PC-FLAG - ] ].

vol-intrans-verb-lex := intransitive-verb-lex & mood-pc-rule-dtr & tense-pc-rule-dtr & vol-case-constraints-pc-rule-dtr & vol-case-constraints-subj-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.INVOL -,
    INFLECTED [ VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG -,
                VOL-CASE-CONSTRAINTS-PC-FLAG -,
                TENSE-PC-FLAG - ] ].

dec-clausal-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM [ LOCAL.CAT [ HEAD.INVOL -,
                         VAL.COMPS < [ LOCAL [ CAT [ HEAD comp,
                                                     WH.BOOL - ],
                                               CONT.HOOK.INDEX.SF prop ] ] > ],
             NON-LOCAL.QUE.LIST < > ] ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj &
                                    [ LOCAL.CAT.HEAD.CASE real-case ] > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM finite,
                                             CONT.HOOK [ ICONS-KEY focus,
                                                         INDEX.E.TENSE nonpast ] ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

past-part-aux-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM past-part ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

future-aux-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM past-part,
                                             CONT.HOOK.INDEX.E [ TENSE past,
                                                                 ASPECT Completive ] ] ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

regular-attr-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

cardinal-except-attr-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

;;; Complementizers

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

q-particle1-lex := qpart-lex-item.

q-particle2-lex := qpart-lex-item &
  [ SYNSEM.LOCAL.CAT [ MC #mc,
                       VAL.COMPS.FIRST.LOCAL.CAT.MC #mc & + ] ].

comps1-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT [ VAL.COMPS.FIRST.LOCAL.CAT.MC -,
                         MC na-or-- ],
                   CONT.HOOK.INDEX.SF prop ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

quantifier-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                  GEND inanimate ] ] ].

;;; Adverbs

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;                           included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ NMZ +,
                              MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS.LIST < [ PRED "nominalized_rel",
                           LBL #ltop,
                           ARG0 ref-ind & #arg0,
                           ARG1 #arg1 ] >,
             HCONS.LIST < qeq &
                          [ HARG #arg1,
                            LARG #larg ] >,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK [ XARG #xarg,
                                   LTOP #larg ] ] ].

low-nmz-subjid-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                               SUBJ #subj ] ].

;;; Intermediate rule types

invol-case-constraints-pc-rule-dtr := word-or-lexrule.
vol-case-constraints-subj-pc-rule-dtr := word-or-lexrule.
possession-pc-rule-dtr := word-or-lexrule.
case-pc-rule-dtr := word-or-lexrule.
indefiniteness-pc-rule-dtr := word-or-lexrule.
while-modifier-pc-rule-dtr := word-or-lexrule.
mood-pc-rule-dtr := word-or-lexrule.
number-pc-rule-dtr := word-or-lexrule.
tense-pc-rule-dtr := word-or-lexrule.
vol-case-constraints-pc-rule-dtr := word-or-lexrule.

;;; Lexical rule types

indefiniteness-pc-lex-rule-super := add-only-no-ccont-rule & case-pc-rule-dtr &
  [ INFLECTED [ INDEFINITENESS-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR indefiniteness-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

indef-rule-lex-rule := indefiniteness-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.DEF - ].

def-sg-lex-rule := const-lex-rule & indefiniteness-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.DEF + ].

indef-pl-lex-rule := const-lex-rule & indefiniteness-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

case-pc-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-PC-FLAG +,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR case-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

dative-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

accusative-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

genitive-rule-lex-rule := case-pc-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

nominative-rule-lex-rule := case-pc-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

pronoun-case-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ CASE-PC-OR-PRONOUN-CASE-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR 1sg-pronoun-noun-lex &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

nominative-pronoun-lex-rule := pronoun-case-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

number-pc-lex-rule-super := add-only-no-ccont-rule & case-pc-rule-dtr & indefiniteness-pc-rule-dtr & possession-pc-rule-dtr &
  [ INFLECTED [ NUMBER-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR number-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

plural-anim-lex-rule := infl-lex-rule & number-pc-lex-rule-super &
  [ DTR.INFLECTED.FEM-NOUN-OR-MASC-NOUN-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

plural-inanim-lex-rule := infl-lex-rule & number-pc-lex-rule-super &
  [ DTR.INFLECTED.INANIMATE-NOUN-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

sg-anim-fem-lex-rule := infl-lex-rule & number-pc-lex-rule-super &
  [ DTR.INFLECTED.FEM-NOUN-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-inanim-nil-lex-rule := const-lex-rule & number-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                       GEND inanimate ] ].

sg-inanim-lex-rule := infl-lex-rule & number-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

sg-anim-masc-lex-rule := infl-lex-rule & number-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

possession-pc-lex-rule-super := case-pc-rule-dtr & indefiniteness-pc-rule-dtr & lex-rule &
  [ INFLECTED [ POSSESSION-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc ],
    DTR possession-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc ] ] ].

possessor-lex-rule-1 := head-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD noun &
                          [ CASE poss-case,
                            POSSESSOR possessor-1 ] ].

anim-poss-lex-rule := infl-lex-rule & possession-pc-lex-rule-super & possessor-lex-rule-1 &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

inanim-poss-lex-rule := infl-lex-rule & possession-pc-lex-rule-super & possessor-lex-rule-1 &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

nonpossessive-lex-rule-1 := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ POSSESSOR nonpossessive ],
                       POSSESSUM nonpossessive ] ].

non-poss-lex-rule := const-lex-rule & nonpossessive-lex-rule-1 & possession-pc-lex-rule-super.

mood-pc-lex-rule-super := add-only-no-rels-hcons-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR mood-pc-rule-dtr &
        [ INFLECTED #infl ] ].

ind-lex-rule := mood-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD indicative ].

foc-lex-rule := mood-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.ICONS-KEY focus ].

invol-case-constraints-pc-lex-rule-super := add-only-no-ccont-rule & const-lex-rule & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ INVOL-CASE-CONSTRAINTS-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR invol-case-constraints-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

invol-anim-obj-1-lex-rule := invol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.CASE nom,
                                             CONT.HOOK.INDEX.PNG [ GEND animate,
                                                                   DEF - ] ] ].

invol-inanim-obj-lex-rule := invol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND inanimate,
                                             CAT.HEAD.CASE nom ] ].

invol-anim-obj-2-lex-rule := invol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.CASE acc,
                                             CONT.HOOK.INDEX.PNG [ GEND animate,
                                                                   DEF + ] ] ].

invol-anim-obj-3-lex-rule := invol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.CASE acc,
                                             CONT.HOOK.INDEX.PNG [ GEND animate,
                                                                   DEF - ] ] ].

invol-intrans-lex-rule := invol-case-constraints-pc-lex-rule-super.

vol-case-constraints-pc-lex-rule-super := add-only-no-ccont-rule & const-lex-rule & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ VOL-CASE-CONSTRAINTS-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR vol-case-constraints-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

vol-inanim-obj-lex-rule := vol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND inanimate,
                                             CAT.HEAD.CASE nom ] ].

vol-anim-obj1-lex-rule := vol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.CASE nom,
                                             CONT.HOOK.INDEX.PNG [ GEND animate,
                                                                   DEF - ] ] ].

vol-anim-obj2-lex-rule := vol-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND animate,
                                             CAT.HEAD.CASE acc ] ].

vol-intrans-lex-rule := vol-case-constraints-pc-lex-rule-super.

invol-trans-case-constraints-pc-lex-rule-super := add-only-no-ccont-rule & const-lex-rule & invol-case-constraints-pc-rule-dtr & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG +,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR invol-trans-verb-lex &
        [ INFLECTED [ TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

invol-inanim-subj-lex-rule := invol-trans-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND inanimate,
                                            CAT.HEAD.CASE nom ] ].

invol-anim-subj1-lex-rule := invol-trans-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND animate,
                                            CAT.HEAD.CASE acc ] ].

invol-anim-subj2-lex-rule := invol-trans-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND animate,
                                            CAT.HEAD.CASE dat ] ].

invol-intrans-case-constraints-pc-lex-rule-super := add-only-no-ccont-rule & const-lex-rule & invol-case-constraints-pc-rule-dtr & mood-pc-rule-dtr & tense-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR invol-intrans-verb-lex &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

invol-inanim-agent-lex-rule := invol-intrans-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND inanimate,
                                            CAT.HEAD.CASE nom ] ].

invol-anim-agent-lex-rule := invol-intrans-case-constraints-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND animate,
                                            CAT.HEAD.CASE dat ] ].

tense-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & mood-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ TENSE-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR tense-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG #vol-case-constraints-subj-pc,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

npt-lex-rule := tense-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE nonpast,
                   CAT.HEAD.FORM finite ] ].

pp-lex-rule := tense-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD.FORM past-part ] ].

pst-invol-lex-rule := tense-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD [ FORM finite,
                              INVOL + ] ] ].

pst-vol-lex-rule := tense-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.HEAD [ FORM finite,
                              INVOL - ] ] ].

while-modifier-pc-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & mood-pc-rule-dtr &
  [ INFLECTED #infl,
    DTR while-modifier-pc-rule-dtr &
        [ INFLECTED #infl ] ].

while_pst-lex-rule := while-modifier-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.HEAD.FORM while,
                   CONT.HOOK.INDEX.E.TENSE past ] ].

while_stem-lex-rule := while-modifier-pc-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.HEAD.FORM while,
                   CONT.HOOK.INDEX.E.TENSE nonpast ] ].

vol-case-constraints-subj-pc-lex-rule-super := add-only-no-ccont-rule & const-lex-rule & mood-pc-rule-dtr & tense-pc-rule-dtr & vol-case-constraints-pc-rule-dtr & while-modifier-pc-rule-dtr &
  [ INFLECTED [ VOL-CASE-CONSTRAINTS-SUBJ-PC-FLAG +,
                INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                TENSE-PC-FLAG #tense-pc,
                INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                INANIMATE-NOUN-FLAG #inanimate-noun,
                VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                CASE-PC-FLAG #case-pc,
                FEM-NOUN-FLAG #fem-noun,
                FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                NUMBER-PC-FLAG #number-pc,
                POSSESSION-PC-FLAG #possession-pc ],
    DTR vol-case-constraints-subj-pc-rule-dtr &
        [ INFLECTED [ INVOL-TRANS-CASE-CONSTRAINTS-PC-FLAG #invol-trans-case-constraints-pc,
                      TENSE-PC-FLAG #tense-pc,
                      INDEFINITENESS-PC-FLAG #indefiniteness-pc,
                      INVOL-CASE-CONSTRAINTS-PC-FLAG #invol-case-constraints-pc,
                      INVOL-INTRANS-CASE-CONSTRAINTS-PC-FLAG #invol-intrans-case-constraints-pc,
                      CASE-PC-OR-PRONOUN-CASE-PC-FLAG #case-pc-or-pronoun-case-pc,
                      INANIMATE-NOUN-FLAG #inanimate-noun,
                      VOL-CASE-CONSTRAINTS-PC-FLAG #vol-case-constraints-pc,
                      CASE-PC-FLAG #case-pc,
                      FEM-NOUN-FLAG #fem-noun,
                      FEM-NOUN-OR-MASC-NOUN-FLAG #fem-noun-or-masc-noun,
                      NUMBER-PC-FLAG #number-pc,
                      POSSESSION-PC-FLAG #possession-pc ] ] ].

vol-subj-lex-rule := vol-case-constraints-subj-pc-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.GEND gender,
                                            CAT.HEAD.CASE nom ] ].

indefiniteness-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED #infl,
    DTR quantifier-determiner-lex &
        [ INFLECTED #infl ] ].

indef-lex-rule := indefiniteness-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.DEF - ].

def-lex-rule := const-lex-rule & indefiniteness-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.DEF + ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

head-nf-subj-phrase-super := basic-head-subj-phrase & declarative-clause & narrow-focus &
  [ NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG + ].

head-nf-comp-phrase-super := basic-head-comp-phrase & narrow-focus &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS #comps,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < #synsem . #comps >,
    NON-HEAD-DTR.SYNSEM #synsem &
                        [ INFOSTR-FLAG + ] ].

narrow-focused-phrase := head-only & unary-nonloc-phrase &
  [ C-CONT [ HOOK #hook,
             RELS.LIST < >,
             HCONS.LIST < >,
             ICONS.LIST < focus-or-topic & #icons &
                          [ IARG2 #target ] > ],
    SYNSEM [ LIGHT -,
             INFOSTR-FLAG +,
             LOCAL [ CAT.VAL [ SPR < >,
                               SUBJ < >,
                               COMPS < >,
                               SPEC < > ],
                     CONT.HOOK [ INDEX #target,
                                 ICONS-KEY #icons ] ] ],
    HEAD-DTR.SYNSEM [ LIGHT -,
                      INFOSTR-FLAG -,
                      LOCAL [ CAT.HEAD noun,
                              CONT [ HOOK #hook,
                                     ICONS.LIST < > ] ] ] ].

non-event-subj-head-phrase := head-final-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE.LIST < >,
                                  REL.LIST < > ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

non-event-head-subj-phrase := head-initial-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE.LIST < >,
                                  REL.LIST < > ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

; The head of head-comp-phrase can't be: ['comp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD +nvjrpdmo &
                          [ AUX - ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

poss-unary-phrase-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ MOD < >,
                                  POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < >,
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD +np ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

morphological-subord-clause-phrase := unary-phrase & unary-nonloc-phrase &
  [ SYNSEM.LOCAL [ CAT [ MC -,
                         VAL [ SUBJ #subj,
                               SPR < >,
                               SPEC < >,
                               COMPS < > ],
                         HEAD adp &
                              [ MOD < [ LOCAL scopal-mod &
                                              [ CAT [ HEAD verb,
                                                      VAL [ SPR < >,
                                                            COMPS < > ] ],
                                                CONT.HOOK [ LTOP #mcl,
                                                            INDEX #index ] ] ] > ] ],
                   COORD - ],
    C-CONT [ RELS.LIST < [ ARG1 #mch,
                           ARG2 #sch ] >,
             HCONS.LIST < qeq &
                          [ HARG #mch,
                            LARG #mcl ],
                          qeq &
                          [ HARG #sch,
                            LARG #scl ] >,
             ICONS.LIST < >,
             HOOK.INDEX #index ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD verb,
                                  MC na-or-+,
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        COMPS < > ] ],
                            CONT.HOOK.LTOP #scl,
                            COORD - ] ] > ].

while-prehead-vp-attach-modifying-clause-phrase := morphological-subord-clause-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT [ VAL.SUBJ < >,
                                HEAD.FORM #feat & while ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD [ FORM #feat,
                              MOD < [ LOCAL.CAT.VAL.SUBJ < [ ] > ] > ],
                       POSTHEAD - ],
    C-CONT.RELS.LIST < [ PRED "_while_subord_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & omni-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & omni-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := omni-conj-last-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-left-coord-rule := omni-conj-last-left-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].
